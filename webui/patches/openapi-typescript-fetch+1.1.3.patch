diff --git a/node_modules/openapi-typescript-fetch/dist/cjs/fetcher.js b/node_modules/openapi-typescript-fetch/dist/cjs/fetcher.js
deleted file mode 100644
index f336c25..0000000
--- a/node_modules/openapi-typescript-fetch/dist/cjs/fetcher.js
+++ /dev/null
@@ -1,203 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Fetcher = void 0;
-const types_1 = require("./types");
-const sendBody = (method) => method === 'post' ||
-    method === 'put' ||
-    method === 'patch' ||
-    method === 'delete';
-function queryString(params) {
-    const qs = [];
-    const encode = (key, value) => `${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`;
-    Object.keys(params).forEach((key) => {
-        const value = params[key];
-        if (value != null) {
-            if (Array.isArray(value)) {
-                value.forEach((value) => qs.push(encode(key, value)));
-            }
-            else {
-                qs.push(encode(key, value));
-            }
-        }
-    });
-    if (qs.length > 0) {
-        return `?${qs.join('&')}`;
-    }
-    return '';
-}
-function getPath(path, payload) {
-    return path.replace(/\{([^}]+)\}/g, (_, key) => {
-        const value = encodeURIComponent(payload[key]);
-        delete payload[key];
-        return value;
-    });
-}
-function getQuery(method, payload, query) {
-    let queryObj = {};
-    if (sendBody(method)) {
-        query.forEach((key) => {
-            queryObj[key] = payload[key];
-            delete payload[key];
-        });
-    }
-    else {
-        queryObj = Object.assign({}, payload);
-    }
-    return queryString(queryObj);
-}
-function getHeaders(body, init) {
-    const headers = new Headers(init);
-    if (body !== undefined && !headers.has('Content-Type')) {
-        headers.append('Content-Type', 'application/json');
-    }
-    if (!headers.has('Accept')) {
-        headers.append('Accept', 'application/json');
-    }
-    return headers;
-}
-function getBody(method, payload) {
-    const body = sendBody(method) ? JSON.stringify(payload) : undefined;
-    return method === 'delete' && body === '{}' ? undefined : body;
-}
-function mergeRequestInit(first, second) {
-    const headers = new Headers(first === null || first === void 0 ? void 0 : first.headers);
-    const other = new Headers(second === null || second === void 0 ? void 0 : second.headers);
-    for (const key of other.keys()) {
-        const value = other.get(key);
-        if (value != null) {
-            headers.set(key, value);
-        }
-    }
-    return Object.assign(Object.assign(Object.assign({}, first), second), { headers });
-}
-function getFetchParams(request) {
-    var _a;
-    const payload = Object.assign(Array.isArray(request.payload) ? [] : {}, request.payload);
-    const path = getPath(request.path, payload);
-    const query = getQuery(request.method, payload, request.queryParams);
-    const body = getBody(request.method, payload);
-    const headers = getHeaders(body, (_a = request.init) === null || _a === void 0 ? void 0 : _a.headers);
-    const url = request.baseUrl + path + query;
-    const init = Object.assign(Object.assign({}, request.init), { method: request.method.toUpperCase(), headers,
-        body });
-    return { url, init };
-}
-function getResponseData(response) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const contentType = response.headers.get('content-type');
-        if (response.status === 204) {
-            return undefined;
-        }
-        if (contentType && contentType.indexOf('application/json') !== -1) {
-            return yield response.json();
-        }
-        const text = yield response.text();
-        try {
-            return JSON.parse(text);
-        }
-        catch (e) {
-            return text;
-        }
-    });
-}
-function fetchJson(url, init) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const response = yield fetch(url, init);
-        const data = yield getResponseData(response);
-        const result = {
-            headers: response.headers,
-            url: response.url,
-            ok: response.ok,
-            status: response.status,
-            statusText: response.statusText,
-            data,
-        };
-        if (result.ok) {
-            return result;
-        }
-        throw new types_1.ApiError(result);
-    });
-}
-function wrapMiddlewares(middlewares, fetch) {
-    const handler = (index, url, init) => __awaiter(this, void 0, void 0, function* () {
-        if (middlewares == null || index === middlewares.length) {
-            return fetch(url, init);
-        }
-        const current = middlewares[index];
-        return yield current(url, init, (nextUrl, nextInit) => handler(index + 1, nextUrl, nextInit));
-    });
-    return (url, init) => handler(0, url, init);
-}
-function fetchUrl(request) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const { url, init } = getFetchParams(request);
-        const response = yield request.fetch(url, init);
-        return response;
-    });
-}
-function createFetch(fetch) {
-    const fun = (payload, init) => __awaiter(this, void 0, void 0, function* () {
-        try {
-            return yield fetch(payload, init);
-        }
-        catch (err) {
-            if (err instanceof types_1.ApiError) {
-                throw new fun.Error(err);
-            }
-            throw err;
-        }
-    });
-    fun.Error = class extends types_1.ApiError {
-        constructor(error) {
-            super(error);
-            Object.setPrototypeOf(this, new.target.prototype);
-        }
-        getActualType() {
-            return {
-                status: this.status,
-                data: this.data,
-            };
-        }
-    };
-    return fun;
-}
-function fetcher() {
-    let baseUrl = '';
-    let defaultInit = {};
-    const middlewares = [];
-    const fetch = wrapMiddlewares(middlewares, fetchJson);
-    return {
-        configure: (config) => {
-            baseUrl = config.baseUrl || '';
-            defaultInit = config.init || {};
-            middlewares.splice(0);
-            middlewares.push(...(config.use || []));
-        },
-        use: (mw) => middlewares.push(mw),
-        path: (path) => ({
-            method: (method) => ({
-                create: ((queryParams) => createFetch((payload, init) => fetchUrl({
-                    baseUrl: baseUrl || '',
-                    path: path,
-                    method: method,
-                    queryParams: Object.keys(queryParams || {}),
-                    payload,
-                    init: mergeRequestInit(defaultInit, init),
-                    fetch,
-                }))),
-            }),
-        }),
-    };
-}
-exports.Fetcher = {
-    for: () => fetcher(),
-};
diff --git a/node_modules/openapi-typescript-fetch/dist/esm/fetcher.js b/node_modules/openapi-typescript-fetch/dist/cjs/index.cjs
similarity index 75%
rename from node_modules/openapi-typescript-fetch/dist/esm/fetcher.js
rename to node_modules/openapi-typescript-fetch/dist/cjs/index.cjs
index 8a3fac6..c71a513 100644
--- a/node_modules/openapi-typescript-fetch/dist/esm/fetcher.js
+++ b/node_modules/openapi-typescript-fetch/dist/cjs/index.cjs
@@ -1,13 +1,51 @@
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-import { ApiError, } from './types';
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+var tslib = require('tslib');
+
+class ApiError extends Error {
+    constructor(response) {
+        super(response.statusText);
+        Object.defineProperty(this, "headers", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: void 0
+        });
+        Object.defineProperty(this, "url", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: void 0
+        });
+        Object.defineProperty(this, "status", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: void 0
+        });
+        Object.defineProperty(this, "statusText", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: void 0
+        });
+        Object.defineProperty(this, "data", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: void 0
+        });
+        Object.setPrototypeOf(this, new.target.prototype);
+        this.headers = response.headers;
+        this.url = response.url;
+        this.status = response.status;
+        this.statusText = response.statusText;
+        this.data = response.data;
+    }
+}
+
 const sendBody = (method) => method === 'post' ||
     method === 'put' ||
     method === 'patch' ||
@@ -89,7 +127,7 @@ function getFetchParams(request) {
     return { url, init };
 }
 function getResponseData(response) {
-    return __awaiter(this, void 0, void 0, function* () {
+    return tslib.__awaiter(this, void 0, void 0, function* () {
         const contentType = response.headers.get('content-type');
         if (response.status === 204) {
             return undefined;
@@ -107,7 +145,7 @@ function getResponseData(response) {
     });
 }
 function fetchJson(url, init) {
-    return __awaiter(this, void 0, void 0, function* () {
+    return tslib.__awaiter(this, void 0, void 0, function* () {
         const response = yield fetch(url, init);
         const data = yield getResponseData(response);
         const result = {
@@ -125,7 +163,7 @@ function fetchJson(url, init) {
     });
 }
 function wrapMiddlewares(middlewares, fetch) {
-    const handler = (index, url, init) => __awaiter(this, void 0, void 0, function* () {
+    const handler = (index, url, init) => tslib.__awaiter(this, void 0, void 0, function* () {
         if (middlewares == null || index === middlewares.length) {
             return fetch(url, init);
         }
@@ -135,14 +173,14 @@ function wrapMiddlewares(middlewares, fetch) {
     return (url, init) => handler(0, url, init);
 }
 function fetchUrl(request) {
-    return __awaiter(this, void 0, void 0, function* () {
+    return tslib.__awaiter(this, void 0, void 0, function* () {
         const { url, init } = getFetchParams(request);
         const response = yield request.fetch(url, init);
         return response;
     });
 }
 function createFetch(fetch) {
-    const fun = (payload, init) => __awaiter(this, void 0, void 0, function* () {
+    const fun = (payload, init) => tslib.__awaiter(this, void 0, void 0, function* () {
         try {
             return yield fetch(payload, init);
         }
@@ -195,6 +233,14 @@ function fetcher() {
         }),
     };
 }
-export const Fetcher = {
+const Fetcher = {
     for: () => fetcher(),
 };
+
+function arrayRequestBody(array, params) {
+    return Object.assign([...array], params);
+}
+
+exports.ApiError = ApiError;
+exports.Fetcher = Fetcher;
+exports.arrayRequestBody = arrayRequestBody;
diff --git a/node_modules/openapi-typescript-fetch/dist/cjs/index.js b/node_modules/openapi-typescript-fetch/dist/cjs/index.js
deleted file mode 100644
index 823b270..0000000
--- a/node_modules/openapi-typescript-fetch/dist/cjs/index.js
+++ /dev/null
@@ -1,9 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.arrayRequestBody = exports.ApiError = exports.Fetcher = void 0;
-const fetcher_1 = require("./fetcher");
-Object.defineProperty(exports, "Fetcher", { enumerable: true, get: function () { return fetcher_1.Fetcher; } });
-const utils_1 = require("./utils");
-Object.defineProperty(exports, "arrayRequestBody", { enumerable: true, get: function () { return utils_1.arrayRequestBody; } });
-const types_1 = require("./types");
-Object.defineProperty(exports, "ApiError", { enumerable: true, get: function () { return types_1.ApiError; } });
diff --git a/node_modules/openapi-typescript-fetch/dist/cjs/types.js b/node_modules/openapi-typescript-fetch/dist/cjs/types.js
deleted file mode 100644
index cbf1bd3..0000000
--- a/node_modules/openapi-typescript-fetch/dist/cjs/types.js
+++ /dev/null
@@ -1,46 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ApiError = void 0;
-const never = Symbol();
-class ApiError extends Error {
-    constructor(response) {
-        super(response.statusText);
-        Object.defineProperty(this, "headers", {
-            enumerable: true,
-            configurable: true,
-            writable: true,
-            value: void 0
-        });
-        Object.defineProperty(this, "url", {
-            enumerable: true,
-            configurable: true,
-            writable: true,
-            value: void 0
-        });
-        Object.defineProperty(this, "status", {
-            enumerable: true,
-            configurable: true,
-            writable: true,
-            value: void 0
-        });
-        Object.defineProperty(this, "statusText", {
-            enumerable: true,
-            configurable: true,
-            writable: true,
-            value: void 0
-        });
-        Object.defineProperty(this, "data", {
-            enumerable: true,
-            configurable: true,
-            writable: true,
-            value: void 0
-        });
-        Object.setPrototypeOf(this, new.target.prototype);
-        this.headers = response.headers;
-        this.url = response.url;
-        this.status = response.status;
-        this.statusText = response.statusText;
-        this.data = response.data;
-    }
-}
-exports.ApiError = ApiError;
diff --git a/node_modules/openapi-typescript-fetch/dist/cjs/utils.js b/node_modules/openapi-typescript-fetch/dist/cjs/utils.js
deleted file mode 100644
index c4560d2..0000000
--- a/node_modules/openapi-typescript-fetch/dist/cjs/utils.js
+++ /dev/null
@@ -1,7 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.arrayRequestBody = void 0;
-function arrayRequestBody(array, params) {
-    return Object.assign([...array], params);
-}
-exports.arrayRequestBody = arrayRequestBody;
diff --git a/node_modules/openapi-typescript-fetch/dist/esm/index.js b/node_modules/openapi-typescript-fetch/dist/esm/index.js
index 13d9b21..d6bf37f 100644
--- a/node_modules/openapi-typescript-fetch/dist/esm/index.js
+++ b/node_modules/openapi-typescript-fetch/dist/esm/index.js
@@ -1,4 +1,240 @@
-import { Fetcher } from './fetcher';
-import { arrayRequestBody } from './utils';
-import { ApiError } from './types';
-export { Fetcher, ApiError, arrayRequestBody };
+import { __awaiter } from 'tslib';
+
+class ApiError extends Error {
+    constructor(response) {
+        super(response.statusText);
+        Object.defineProperty(this, "headers", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: void 0
+        });
+        Object.defineProperty(this, "url", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: void 0
+        });
+        Object.defineProperty(this, "status", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: void 0
+        });
+        Object.defineProperty(this, "statusText", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: void 0
+        });
+        Object.defineProperty(this, "data", {
+            enumerable: true,
+            configurable: true,
+            writable: true,
+            value: void 0
+        });
+        Object.setPrototypeOf(this, new.target.prototype);
+        this.headers = response.headers;
+        this.url = response.url;
+        this.status = response.status;
+        this.statusText = response.statusText;
+        this.data = response.data;
+    }
+}
+
+const sendBody = (method) => method === 'post' ||
+    method === 'put' ||
+    method === 'patch' ||
+    method === 'delete';
+function queryString(params) {
+    const qs = [];
+    const encode = (key, value) => `${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`;
+    Object.keys(params).forEach((key) => {
+        const value = params[key];
+        if (value != null) {
+            if (Array.isArray(value)) {
+                value.forEach((value) => qs.push(encode(key, value)));
+            }
+            else {
+                qs.push(encode(key, value));
+            }
+        }
+    });
+    if (qs.length > 0) {
+        return `?${qs.join('&')}`;
+    }
+    return '';
+}
+function getPath(path, payload) {
+    return path.replace(/\{([^}]+)\}/g, (_, key) => {
+        const value = encodeURIComponent(payload[key]);
+        delete payload[key];
+        return value;
+    });
+}
+function getQuery(method, payload, query) {
+    let queryObj = {};
+    if (sendBody(method)) {
+        query.forEach((key) => {
+            queryObj[key] = payload[key];
+            delete payload[key];
+        });
+    }
+    else {
+        queryObj = Object.assign({}, payload);
+    }
+    return queryString(queryObj);
+}
+function getHeaders(body, init) {
+    const headers = new Headers(init);
+    if (body !== undefined && !headers.has('Content-Type')) {
+        headers.append('Content-Type', 'application/json');
+    }
+    if (!headers.has('Accept')) {
+        headers.append('Accept', 'application/json');
+    }
+    return headers;
+}
+function getBody(method, payload) {
+    const body = sendBody(method) ? JSON.stringify(payload) : undefined;
+    return method === 'delete' && body === '{}' ? undefined : body;
+}
+function mergeRequestInit(first, second) {
+    const headers = new Headers(first === null || first === void 0 ? void 0 : first.headers);
+    const other = new Headers(second === null || second === void 0 ? void 0 : second.headers);
+    for (const key of other.keys()) {
+        const value = other.get(key);
+        if (value != null) {
+            headers.set(key, value);
+        }
+    }
+    return Object.assign(Object.assign(Object.assign({}, first), second), { headers });
+}
+function getFetchParams(request) {
+    var _a;
+    const payload = Object.assign(Array.isArray(request.payload) ? [] : {}, request.payload);
+    const path = getPath(request.path, payload);
+    const query = getQuery(request.method, payload, request.queryParams);
+    const body = getBody(request.method, payload);
+    const headers = getHeaders(body, (_a = request.init) === null || _a === void 0 ? void 0 : _a.headers);
+    const url = request.baseUrl + path + query;
+    const init = Object.assign(Object.assign({}, request.init), { method: request.method.toUpperCase(), headers,
+        body });
+    return { url, init };
+}
+function getResponseData(response) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const contentType = response.headers.get('content-type');
+        if (response.status === 204) {
+            return undefined;
+        }
+        if (contentType && contentType.indexOf('application/json') !== -1) {
+            return yield response.json();
+        }
+        const text = yield response.text();
+        try {
+            return JSON.parse(text);
+        }
+        catch (e) {
+            return text;
+        }
+    });
+}
+function fetchJson(url, init) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const response = yield fetch(url, init);
+        const data = yield getResponseData(response);
+        const result = {
+            headers: response.headers,
+            url: response.url,
+            ok: response.ok,
+            status: response.status,
+            statusText: response.statusText,
+            data,
+        };
+        if (result.ok) {
+            return result;
+        }
+        throw new ApiError(result);
+    });
+}
+function wrapMiddlewares(middlewares, fetch) {
+    const handler = (index, url, init) => __awaiter(this, void 0, void 0, function* () {
+        if (middlewares == null || index === middlewares.length) {
+            return fetch(url, init);
+        }
+        const current = middlewares[index];
+        return yield current(url, init, (nextUrl, nextInit) => handler(index + 1, nextUrl, nextInit));
+    });
+    return (url, init) => handler(0, url, init);
+}
+function fetchUrl(request) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { url, init } = getFetchParams(request);
+        const response = yield request.fetch(url, init);
+        return response;
+    });
+}
+function createFetch(fetch) {
+    const fun = (payload, init) => __awaiter(this, void 0, void 0, function* () {
+        try {
+            return yield fetch(payload, init);
+        }
+        catch (err) {
+            if (err instanceof ApiError) {
+                throw new fun.Error(err);
+            }
+            throw err;
+        }
+    });
+    fun.Error = class extends ApiError {
+        constructor(error) {
+            super(error);
+            Object.setPrototypeOf(this, new.target.prototype);
+        }
+        getActualType() {
+            return {
+                status: this.status,
+                data: this.data,
+            };
+        }
+    };
+    return fun;
+}
+function fetcher() {
+    let baseUrl = '';
+    let defaultInit = {};
+    const middlewares = [];
+    const fetch = wrapMiddlewares(middlewares, fetchJson);
+    return {
+        configure: (config) => {
+            baseUrl = config.baseUrl || '';
+            defaultInit = config.init || {};
+            middlewares.splice(0);
+            middlewares.push(...(config.use || []));
+        },
+        use: (mw) => middlewares.push(mw),
+        path: (path) => ({
+            method: (method) => ({
+                create: ((queryParams) => createFetch((payload, init) => fetchUrl({
+                    baseUrl: baseUrl || '',
+                    path: path,
+                    method: method,
+                    queryParams: Object.keys(queryParams || {}),
+                    payload,
+                    init: mergeRequestInit(defaultInit, init),
+                    fetch,
+                }))),
+            }),
+        }),
+    };
+}
+const Fetcher = {
+    for: () => fetcher(),
+};
+
+function arrayRequestBody(array, params) {
+    return Object.assign([...array], params);
+}
+
+export { ApiError, Fetcher, arrayRequestBody };
diff --git a/node_modules/openapi-typescript-fetch/dist/esm/types.js b/node_modules/openapi-typescript-fetch/dist/esm/types.js
deleted file mode 100644
index 74a5a04..0000000
--- a/node_modules/openapi-typescript-fetch/dist/esm/types.js
+++ /dev/null
@@ -1,42 +0,0 @@
-const never = Symbol();
-export class ApiError extends Error {
-    constructor(response) {
-        super(response.statusText);
-        Object.defineProperty(this, "headers", {
-            enumerable: true,
-            configurable: true,
-            writable: true,
-            value: void 0
-        });
-        Object.defineProperty(this, "url", {
-            enumerable: true,
-            configurable: true,
-            writable: true,
-            value: void 0
-        });
-        Object.defineProperty(this, "status", {
-            enumerable: true,
-            configurable: true,
-            writable: true,
-            value: void 0
-        });
-        Object.defineProperty(this, "statusText", {
-            enumerable: true,
-            configurable: true,
-            writable: true,
-            value: void 0
-        });
-        Object.defineProperty(this, "data", {
-            enumerable: true,
-            configurable: true,
-            writable: true,
-            value: void 0
-        });
-        Object.setPrototypeOf(this, new.target.prototype);
-        this.headers = response.headers;
-        this.url = response.url;
-        this.status = response.status;
-        this.statusText = response.statusText;
-        this.data = response.data;
-    }
-}
diff --git a/node_modules/openapi-typescript-fetch/dist/esm/utils.js b/node_modules/openapi-typescript-fetch/dist/esm/utils.js
deleted file mode 100644
index 26815db..0000000
--- a/node_modules/openapi-typescript-fetch/dist/esm/utils.js
+++ /dev/null
@@ -1,3 +0,0 @@
-export function arrayRequestBody(array, params) {
-    return Object.assign([...array], params);
-}
diff --git a/node_modules/openapi-typescript-fetch/package.json b/node_modules/openapi-typescript-fetch/package.json
index 02362ec..da3de45 100644
--- a/node_modules/openapi-typescript-fetch/package.json
+++ b/node_modules/openapi-typescript-fetch/package.json
@@ -8,12 +8,14 @@
   },
   "author": "Ajai Shankar",
   "license": "MIT",
-  "main": "./dist/cjs/index.js",
+  "type": "module",
+  "types": "./dist/esm/index.d.ts",
+  "main": "./dist/cjs/index.cjs",
   "module": "./dist/esm/index.js",
   "exports": {
     "browser": "./dist/esm/index.js",
     "import": "./dist/esm/index.js",
-    "require": "./dist/cjs/index.js"
+    "require": "./dist/cjs/index.cjs"
   },
   "files": [
     "dist"
@@ -37,19 +39,22 @@
   },
   "homepage": "https://github.com/ajaishankar/openapi-typescript-fetch#readme",
   "devDependencies": {
-    "msw": "^0.35.0",
+    "@rollup/plugin-node-resolve": "^13.3.0",
+    "@rollup/plugin-typescript": "^8.3.3",
+    "@types/jest": "^27.0.0",
     "@typescript-eslint/eslint-plugin": "^4.30.0",
     "@typescript-eslint/parser": "^4.31.0",
+    "codecov": "^3.8.2",
     "eslint": "^7.32.0",
     "eslint-config-prettier": "^8.3.0",
     "eslint-plugin-prettier": "^4.0.0",
-    "codecov": "^3.8.2",
     "jest": "^27.2.5",
-    "@types/jest": "^27.0.0",
+    "msw": "^0.35.0",
     "prettier": "^2.4.0",
     "rimraf": "^3.0.0",
-    "ts-node": "^10.0.0",
+    "rollup": "^2.77.0",
     "ts-jest": "^27.0.0",
+    "ts-node": "^10.0.0",
     "typescript": "^4.4.3",
     "whatwg-fetch": "^3.6.2"
   },
@@ -60,7 +65,7 @@
   },
   "scripts": {
     "clean": "rimraf './dist'",
-    "build": "npm run clean && tsc --project tsconfig.json && tsc --project tsconfig.cjs.json",
+    "build": "npm run clean && rollup -c rollup.config.js",
     "lint": "eslint .",
     "prepare": "npm run build",
     "test": "npm run build && jest",
diff --git a/node_modules/openapi-typescript-fetch/rollup.config.js b/node_modules/openapi-typescript-fetch/rollup.config.js
new file mode 100644
index 0000000..258d656
--- /dev/null
+++ b/node_modules/openapi-typescript-fetch/rollup.config.js
@@ -0,0 +1,30 @@
+import nodeResolve from '@rollup/plugin-node-resolve'
+import typescriptPlugin from '@rollup/plugin-typescript'
+
+import packageJson from './package.json'
+
+/** @type{import('rollup').RollupOptions[]} */
+const options = [
+  {
+    input: 'src/index.ts',
+    output: [
+      {
+        file: packageJson.exports.require,
+        format: 'cjs',
+        entryFileNames: '[name].cjs',
+      },
+      {
+        file: packageJson.exports.import,
+        format: 'esm',
+      },
+    ],
+    plugins: [
+      nodeResolve({ resolveOnly: [/^\./] }),
+      typescriptPlugin({
+        tsconfig: './tsconfig.json',
+      }),
+    ],
+  },
+]
+
+export default options
